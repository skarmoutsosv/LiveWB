#!/bin/bash
#
# LiveWB (Live Weather Background)
# A Gnome3 script which creates a live weather wallpaper, using up to three combined images from EUMETSAT.
# The images are refreshed only if: a user is logged on AND there is a newer image for download AND there are no maximized windows.  
# Author: Vangelis Skarmoutsos <skarmoutsosv@gmail.com>, 2015
# License: GNU GPL v3

# Used tools: pgrep, convert, composite, xdotool, xprop, date, dig, whois, awk, 
# The following code is divided to four sections: Atomicity, Functions, Initialization, Main loop.

######## Atomicity start ########
# KILL previous script processes.
# This block must be in  the first lines of code to actually work, or else it will kill itself.
# TO DO: replace this block with either flock and trap, or a starter script.
name=( $( pgrep "LiveWB" ) ) 
for (( i = 0 ; i < ${#name[@]} - 1 ; i++ )); do
    kill -9 ${name[$i]}
done
######## Atomicity end ########

####### Functions start ######## 
# TO DO: Get screen resolution in order to select the correct config file.
# It should be implemented if there are config files for the same area, with different resolutions.
# Or to prevent running, if current resolution is lower than the configured in .config file
#function getscreenresolution {
#SCRH=$(xrandr | awk '/current/ { print $8 }')
#SCRW=$(xrandr | awk '/current/ { print $10 }')
#SCRW=${SCRW%\,}	 # removes trailing comma (,)
#}


# Writes a message to LiveWB.log file.
# Example: log "new composition created"
function log {
	LOGSTR=$(date +%F" "%T.%N)
	echo "$LOGSTR $1" >> $INSTALLPATH/LiveWB.log
}

# Gets an image from the web and stores it localy. Syntax: gi $getimage $storeimage
function gi {
	COUNTER=0
	while [ $COUNTER -lt 3 ]; do 	# if can not get image, retry for (max COUNTER*sleepingtime) seconds (3*60=180sec=3min)
		wget  -qO "$2.tmp" $1
		temp=$(stat -c%s "$2.tmp")
		if (( temp > 1000 )) 	# if image is greater than 1000 bytes
			then 	rm $2
				mv "$2.tmp" $2 #image is refreshed
				if [[ $LOGGING == "yes" ]]
				then
					log "Image fetched from $1"
					log " and is saved as $2"
				fi
				break
		fi
		sleep 60 		# if can not get image, retry after 60 seconds
        	let COUNTER=COUNTER+1 
	done
}

# Combines three images to one.
function kolaz {
	convert -size $DIMENSIONS xc:black "$STOREPATH/temp.png"
	if [[ ! -z $GETIMAGE1 ]] ; then composite -geometry $POSITION1 "$STOREPATH/LiveWB1.jpg" "$STOREPATH/temp.png" "$STOREPATH/temp.png" ; fi
	if [[ ! -z $GETIMAGE2 ]] ; then composite -geometry $POSITION2 "$STOREPATH/LiveWB2.jpg" "$STOREPATH/temp.png" "$STOREPATH/temp.png" ; fi
	if [[ ! -z $GETIMAGE3 ]] ; then composite -geometry $POSITION3 "$STOREPATH/LiveWB3.jpg" "$STOREPATH/temp.png" "$STOREPATH/temp.png" ; fi
	if [[ ! -z $LEGENDNAME && ! -z $LEGENDPOSITION && ! -f $INSTALLPATH/legend/$LEGENDNAME   ]] ; then
		GETVAR="http://oiswww.eumetsat.org/IPPS/html/bin/bars/$LEGENDNAME"
		wget -qO "$INSTALLPATH/legend/$LEGENDNAME" $GETVAR
	fi
	if [[ ! -z $LEGENDNAME && ! -z $LEGENDPOSITION && -f $INSTALLPATH/legend/$LEGENDNAME ]] ; then
		composite -geometry $LEGENDPOSITION "$INSTALLPATH/legend/$LEGENDNAME" "$STOREPATH/temp.png" "$STOREPATH/temp.png"
	fi
	SECS=$(date +%s)
	NEXTUPDATE=$(date '+%T' --date="@$((SECS + UPDATE))")
	MYTEXT="LiveWB - LiveWeatherBackground\n@github.com/skarmoutsosv\n\nCurrent image created at $(date +%R)\nusing Bash, ImageMagick\nand $MYTEXTCOUNTRYAREA.config settings.\nNext update at $NEXTUPDATE"
	if [[ -z $INFOPLACE ]] ; then INFOPLACE="south" ; fi
	case "$INFOPLACE" in
		"north" | "south") TEXTCOORDS="+0+50" ;;
		"west" | "east") TEXTCOORDS="+50+0" ;;
		"northwest" | "northeast" | "southwest" | "southeast") TEXTCOORDS="+50+50" ;;
		*) INFOPLACE="south" ; TEXTCOORDS="+0+50" ;;
	esac
	convert "$STOREPATH/temp.png" -gravity $INFOPLACE \
	   -stroke '#000F' -strokewidth 3 -annotate $TEXTCOORDS "$MYTEXT" \
	   -stroke  none   -fill white  -annotate $TEXTCOORDS "$MYTEXT" \
	   $STOREIMAGE
	if [[ $LOGGING == "yes" ]]
	then log "A new composition image created at $STOREIMAGE" ; fi
	rm "$STOREPATH/temp.png"

	
	## Added 2016-01-14 Osric Wilkinson
	xfdesktop --reload
}

function setloopvars {
	set_update_vars $GETIMAGE1 "UPDATE1"
	set_update_vars $GETIMAGE2 "UPDATE2"
	set_update_vars $GETIMAGE3 "UPDATE3"
}

function set_update_vars {
	if [[ $1 == *"MSG_MPE"* || $1 == *"MSG_FIR"* || $1 == *"MSG_CLM"* || $1 == *"MSG_CTH"* ]] ; then
		set_update=900 ; # Update every 15min. Image url contains MPE, FIR, CLM or CTH.
	elif [[ $1 == *"MSG_RGB"* || $1 == *"MSG_IR"* || $1 == *"MSG_VIS"* || $1 == *"MSG_WV"* ]] ; then
		set_update=3600 ; # Update every 1h. Image url contains RGB, IR, VIS or WV.
	elif [[ $1 == *"MSG_CLA"* ]] ; then
		set_update=10800 # Update every 3h. Image url contains CLA.
	fi
	case $2 in
	  "UPDATE1") UPDATE1=$set_update ;;
	  "UPDATE2") UPDATE2=$set_update ;;
	  "UPDATE3") UPDATE3=$set_update ;;
	esac
}

# Example: getnewimage $GETIMAGE1 $UPDATE1 "LiveWB1.jpg"
function getnewimage {
    currentUTChour=$(date -u +%H)
    currentmin=$(date +%M)
    # images which update each hour (at zero minutes), are available at the web after 29 minutes at most (tested at November 2015)
    # images which update every three hours, are available at the web after ? minutes. (not tested, the same minutes as hourly was set)
    if [[ ! -z $1 && $2 = "900" ]] 
	then
	gi $1 "$STOREPATH/$3" 
	STITCH=1
    fi
    if [[ ! -z $1 && $2 = "3600" ]] ; then 
	if [[ $currentmin -ge 30 && $currentmin -le 44 ]] ;
	  then
	  gi $1 "$STOREPATH/$3" 
	  STITCH=1 
	fi
    fi
    if [[ ! -z $1 && $2 = "10800" ]] ; then 
	if [[ $((currentUTChour % 3)) -eq 0 && $currentmin -ge 30 && $currentmin -le 44 ]]
	  then
	  gi $1 "$STOREPATH/$3" 
	  STITCH=1 
	fi
    fi
}

function updateimages {
# This function is used only at initialization.
	if [[ ! -z $GETIMAGE1 ]] ; then gi $GETIMAGE1 "$STOREPATH/LiveWB1.jpg" ; fi # If variable is not empty, get image.
	if [[ ! -z $GETIMAGE2 ]] ; then gi $GETIMAGE2 "$STOREPATH/LiveWB2.jpg" ; fi
	if [[ ! -z $GETIMAGE3 ]] ; then gi $GETIMAGE3 "$STOREPATH/LiveWB3.jpg" ; fi
}

function waitnomax {
    while true ; do
	# Find all visible window ids
	wids=$(xdotool search -onlyvisible -name "")
	# Find if anyone of the windows is maximized
	FOUND="no"
	for wid in $wids ; do
		STATE=$(xprop -id $wid _NET_WM_STATE)
		# If the variable contains both the strings 
		if [[ $STATE == *"_NET_WM_STATE_MAXIMIZED_HORZ"* &&  $STATE == *"_NET_WM_STATE_MAXIMIZED_VERT"* ]]
		then
		  FOUND="yes"
		  break
		fi
	done
	if [[ $FOUND == "yes" ]] ; then
	  # When the last maximized window is closed, the background should update almost immediatly, if it is needed.
	  # The following delay should be 2 seconds (or whatever feels right).
	  sleep 2 # Delay re-check for maximized window. 
	else
	  return # If there is none maximized window, exit function.
	fi
    done
}
######## Functions end ########

######## Initialization start ########
INSTALLPATH="$HOME/bin/LWB" # without trailing slash "/".

# Get main configuration variables
source $INSTALLPATH/LiveWB.config

# Country discover
if [[ $AUTOAREA == "yes" ]]
then
  EXTIPADDR=$(dig +short myip.opendns.com @resolver1.opendns.com)
  COUNTRY=$(whois $EXTIPADDR | awk -F':[ \t]+' 'tolower($1) ~ /^country$/ { print tolower($2) }')
fi

# Country selection
# If AUTOAREA="yes", and COUNTRY is not empty, and the correct config file exists
if [[ $AUTOAREA == "yes" &&  ! -z $COUNTRY && -f $INSTALLPATH/config/$COUNTRY.config ]]
then
  # Get variables for the discovered country.
  source $INSTALLPATH/config/$COUNTRY.config
  MYTEXTCOUNTRYAREA=$COUNTRY
else
  # Get variables for the manually selected country or area.
  source $INSTALLPATH/config/$AREA.config
  MYTEXTCOUNTRYAREA=$AREA
fi

if [[ $LOGGING == "yes" ]]
then log "LiveWB started. Using $MYTEXTCOUNTRYAREA.config settings." ; fi

# Number of seconds between updates (900s=15min, 3600s=1h, 10800s=3h)
# LiveWB update logic conforms to EUMETSAT's update frequency policy.
UPDATE=900 #  Do not change this to "900". The update logic relies to multiples of 15 minutes.

# Set the background image using dconf key (for GNOME 3).
#gsettings set org.gnome.desktop.background picture-uri 'file://'$STOREIMAGE

## Edit 2015-01-14 Osric Wilkinson
# Based on http://stackoverflow.com/a/12045412/195833

echo -e "# xfce backdrop list\n$STOREIMAGE" > $HOME/.config/xfce4/desktop/backdrop.list
xfdesktop --reload

setloopvars # Calculates the delay values (UPDATE1, UPDATE2, UPDATE3) for each of the images
updateimages # First time unconditional fetch images
kolaz # Composition creation
sleep $UPDATE
if [[ $DETECTMAXIMIZED == "yes" ]] ; then waitnomax ; fi
######## Initialization end ########

######## Main loop start ######## 
# Runs every 15minutes and updates images depending of each one's specific UPDATEx value.
# If there is one or more maximized windows, it waits and re-checks every second.
while true ; do
	STITCH=0
	if [[ ! -z $GETIMAGE1 ]] ; then getnewimage $GETIMAGE1 $UPDATE1 "LiveWB1.jpg" ; fi
	if [[ ! -z $GETIMAGE2 ]] ; then getnewimage $GETIMAGE2 $UPDATE2 "LiveWB2.jpg" ; fi
	if [[ ! -z $GETIMAGE3 ]] ; then getnewimage $GETIMAGE3 $UPDATE3 "LiveWB3.jpg" ; fi
	if [ $STITCH -eq 1 ] ; then
	    kolaz
	    STITCH=0
	fi

	sleep $UPDATE
	if [[ $DETECTMAXIMIZED == "yes" ]] ; then waitnomax ; fi
done
######## Main loop end ########

